一、基本二分查找表：以数组为主要数据结构，二分查找为主要查找方法，通过保持数组的有序性提升查找的效率。但该数组插入效率极低，遍历数组次数多，不适用于大量数据。

二、二叉树查找表：以链表为主要数据结构，二叉树为数据原型，其结构特点如下：
1) 二叉树链表的每个结点有两条链接，并保存着该结点为根结点的树的大小。
2) 二叉树的左链接指向子树的键都小于该结点，同时右链接指向子树的键都大于该结点。
3) 二叉树的增长方向是自上而下的，无法保证平衡性。

三、2-3树：以二叉树为基本结构，并增加一种新结点――3-结点，其特征如下：
1) 3-结点有两个键，三条链接，分别指向两个键的左、中、右三个区间。
2) 2-3树是一种完全平衡树，所有的空链接到根结点的距离都相等。
3) 为了保持完美平衡，2-3树的增长方式是自下而上的。
4) 对于普通的2-结点，其在插入结点的过程时会变成一个3-结点；而对于一个3-结点，其插入结点的过程中可能出现4-结点，然后根据二叉树规则裂化为一个三个2-结点的平衡子树（产生新的根结点），或者裂化为两个2-结点，再向上一个结点插入一个键（产生新的3-或4-结点），一直到根结点为止。

四、红黑二叉树：以普通二叉树的形式表示的2-3树，用红链接连接两个2-结点来表示一个3-结点，黑链接为原来的链接。其特征如下：
1) 红链接均为左链接（这样才能同时指向左、中两个区域）。
2）没有任何结点能同时连接两个红链接（不存在4-结点）。
3）所有空链接到根节点的黑链接数相等（完美平衡）。

五、Hash表：其底层数据结构为一个大小可控的Entry<K,V>数组,主要根据对象的hashCode通过hash算法进行数组索引的映射，从而决定数据的存储位置。主要有以下几点：
1) hash算法保证了通过hashCode得到的索引值一定小于数组大小，但同时可能出现重复。此时即通过已存在的Entry<K,V>对象指向新的Entry<K,V>对象，以此形成Entry链。
2) hash表的数组结构在调用默认构造的情况下大小为16，负载因子为0.75，当存储的Entry对象大小大于数组大小*0.75时（在这里的初始情况下即12），数组大小会增长为原来的两倍。
3) 当数组存储的Entry链较长时，hash表的查找理所当然地会变慢，故hash表的大小和增长因子决定了它的查找效率（插入效率恒定不变）。当需要以空间换查找速度时，应调小负载因子，反之应该扩大负载因子。

六、线性探测散列表：Hash表的另一种实现，对于键的Hash值重复的情况，插入操作不采取延长链表的策略，而是将索引值自增，直到寻到数组为空的一个位置，将键值填入；同样查找操作也是由原来的对应索引开始查找，知道查找到目标键或者空值。
