    背包(Bag):只存不删，存储遍历无序。
队列(queue):enqueue进队，dequeue出队，先进先出。

定容栈(FixedCapacityStack):容量固定，先进后出，无法迭代的一个简单栈，基础成员变量为一个泛型数组和声明数组长度的int值。
       其pop()和push()方法分别用于弹出元素和压栈。前者会在栈内元素小于栈长度的四分之一时缩减数组的长度至二分之一，后者则会在长度不足时加倍数组长度，两者的操作时间都与栈的大小无关(因为本质上只接触到了数组的尾端)。

链表实现的下压栈:同上面的基本思路，不同之处在于数据结构由数组改为链表，栈的成员变量也从泛型数组改为链表头结点。链表节点只有两个成员变量，一个泛型类型和一个节点类型。每一个节点保存自身的元素并且指向下一个节点，尾节点节点变量指向null。其基本的pop()与push()方法也同样与链表长度无关，进栈时新建一个头节点，而出栈时删除当前头节点。

链表实现的队列:成员变量中同时保存头节点和尾节点，pop()时将节点添加到尾部，push()时删除一个头部节点。

二叉堆:用二叉树表示的堆，其有序条件为每个父节点都大于从属的两个子节点，并由此可以推出一个有序二叉堆的根节点是最大节点。故其可用于实现优先队列，整个实现是这样的:①用数组存储相应数据，其一开始是一个有序完全二叉树。②插入数据时，将数据加在数组末尾，然后开始恢复排序(swim,即与其当前父节点比较大小，比父节点大时则与其交换位置，再继续与上一级父节点比较，直至所处位置父节点大于该节点)。③删除最大数据时，先交换数组尾节点与根结点，然后删除原来的根结点，最后进行恢复排序(sink,即与其子节点比较大小，比子节点小时则与子节点交换位置，再继续比较，直到所处位置大于其子节点)。
