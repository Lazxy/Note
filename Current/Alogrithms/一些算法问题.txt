联通性算法问题：  
    一个数组中，若两个数相互联通(这个概念可以理解为相近，并且这种相近性可传递)，则它们属于同一分量，否则将其联通。

quick-find算法:假设代表分量标识符的值(相当于类别编号)直接放在以触点为角标的数组(假设所有点都可以表示为唯一的int值)下，并且当且仅当其值相等时其是联通的。这种情况下，则判断联通性的方法find开销仅为访问各两个数组一次，但将其联通的方法union开销为遍历数组的余下所有值并改变每一个非联通对象的值。如果需要将整个数组联通，则最低需要(N+3)(N-1)次访问数组，其开销是平方级别的。


    quick-union算法:假设以触点为角标的数组中放的值为其他同分量的触点(或者自身)（这里相当于链表的一个结点存放下一个结点的索引），且每个分量中只有一个触点存放着自身的值，该触点称为根节点。以根节点为分量标识符，实际就是组成了一颗树，其大小为节点(或触点)数量，某节点的深度为其到根节点的链接数，其高度为该树的最大深度(最大为节点数-1)。这种条件下联通性算法的find最大开销为遍历某个分量(单通路树)，union则是直接随机地将一个分量的根节点接在另一个分量的根节点上，开销极小。于是在联通整个数组的结果下，该算法的最小开销是线性级别的(所有节点都连在同一个节点上，深度最低)，最大开销是平方级别的(从头到尾所有节点都不相连，深度最高)
    

weight quick-union算法: quick-union算法的改进版，其多维护了一个数组，用于记录每个分量的大小。每次union时将大小较小的树的根节点连到大小较大的树上。这样只要从最初连接开始就使用该算法就能够保证最后只剩下一个分量时其深度最浅，即find速度最快。其复杂度永远小于log2 N。

      weight quick-union with path compresson:路径压缩的加权算法，其作为加权算法的改进，主要是在find操作中加上了一个循环，在找到一个根节点后将前面遍历过的所有同分量节点都连到这个根节点上，这样便创造出了联通性算法的最优情况(所有子节点都直接连在根节点上)，其复杂度无限接近于常数级。

Kendall tau 距离问题：
    对于两个元素类别相同而顺序不同的数组，Kendall tau 距离用于衡量它们之间的区分度。如数组a{3,2,0,1,5,4} 和数组b{1,0,3,4,5,2} 它们之间存在3-0、2-1、2-0、2-4、2-5、3-1、0-1、5-4八对顺序不同的数对，故称其存在8个Kendall tau距离。该距离的计算思路为：一、确定一个标准数组顺序，如果标准数组顺序不存在，则采用映射的方式将其映射到自然顺序；二、采用插入排序对映射转换后的对比数组进行排序，其中数对的交换次数即为两数组的逆序数对对数。其中对于数字数组的映射做法是：用ainv[a[i]] = i;的方式构造索引数组（相当于将数组索引和数组值交换了位置），其对于数组a的映射值即为自然顺序值；再用binv[i] = ainv[b[i]];的方式对数组b进行索引映射，此时得到的新数组binv[i]即为相对于有序自然数组的逆序数组，对该数组进行排序即可得到a与b的Kendall tau距离。